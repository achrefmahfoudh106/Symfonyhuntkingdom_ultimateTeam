<?php

use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Psr\Log\LoggerInterface;

/**
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appDevDebugProjectContainerUrlGenerator extends Symfony\Component\Routing\Generator\UrlGenerator
{
    private static $declaredRoutes;

    public function __construct(RequestContext $context, LoggerInterface $logger = null)
    {
        $this->context = $context;
        $this->logger = $logger;
        if (null === self::$declaredRoutes) {
            self::$declaredRoutes = [
        '_wdt' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:toolbarAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/_wdt',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_home' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:homeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/search',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search_bar' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchBarAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/search_bar',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_phpinfo' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:phpinfoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/phpinfo',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search_results' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchResultsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/search/results',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_open_file' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:openAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/open',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:panelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_router' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.router:panelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/router',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_exception' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.exception:showAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exception',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_exception_css' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.exception:cssAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exception.css',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_twig_error_test' => array (  0 =>   array (    0 => 'code',    1 => '_format',  ),  1 =>   array (    '_controller' => 'twig.controller.preview_error:previewErrorPageAction',    '_format' => 'html',  ),  2 =>   array (    'code' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => '[^/]++',      3 => '_format',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'code',    ),    2 =>     array (      0 => 'text',      1 => '/_error',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'event_default_index' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'EventBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'product_default_index' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'ProductBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addPost' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'ForumBundle\\Controller\\PostController::addPostAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/addPost',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'getPostById' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'ForumBundle\\Controller\\PostController::getPostByIdAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/getPostById',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'editPost' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'ForumBundle\\Controller\\PostController::editPostAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/editPost',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'listPost' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'ForumBundle\\Controller\\PostController::listPostAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/listPost',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deletePost' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'ForumBundle\\Controller\\PostController::deletePostAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/deletePost',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addComment' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'ForumBundle\\Controller\\CommentController::addCommentAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/addComment',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'getCommentById' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'ForumBundle\\Controller\\CommentController::getCommentByIdAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/getCommentById',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'editComment' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'ForumBundle\\Controller\\CommentController::editCommentAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/editComment',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'listComment' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'ForumBundle\\Controller\\CommentController::listCommentAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/listComment',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteComment' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'ForumBundle\\Controller\\CommentController::deleteCommentAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/deleteComment',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addLikes' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'ForumBundle\\Controller\\LikesController::addLikesAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/addLikes',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'getLikeById' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'ForumBundle\\Controller\\LikesController::getLikeByIdAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/getLikeById',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'editLike' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'ForumBundle\\Controller\\LikesController::editLikeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/editLike',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'listLikes' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'ForumBundle\\Controller\\LikesController::listLikesAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/listLikes',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteLike' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'ForumBundle\\Controller\\LikesController::deleteLikeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/deleteLike',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addProduct' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'ProductBundle\\Controller\\ProductControllerController::addProductAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/addProduct',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'getProductById' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'ProductBundle\\Controller\\ProductControllerController::getProductByIdAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/getProductById',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'editProduct' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'ProductBundle\\Controller\\ProductControllerController::editProductAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/editProduct',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'listProduct' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'ProductBundle\\Controller\\ProductControllerController::listProductAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/listProduct',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteProduct' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'ProductBundle\\Controller\\ProductControllerController::deleteProductAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/deleteProduct',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addEvent' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'EventBundle\\Controller\\EventController::addEventAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/addEvent',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'getEventById' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'EventBundle:EventController:getEventById',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/getEventById',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'editEvent' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'EventBundle\\Controller\\EventController::editEventAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/editEvent',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'listEvent' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'EventBundle\\Controller\\EventController::listEventAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/listEvent',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteEvent' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'EventBundle\\Controller\\EventController::deleteEventAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/deleteEvent',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'nelmio_api_doc_index' => array (  0 =>   array (    0 => 'view',  ),  1 =>   array (    '_controller' => 'Nelmio\\ApiDocBundle\\Controller\\ApiDocController::indexAction',    'view' => 'default',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'view',    ),    1 =>     array (      0 => 'text',      1 => '/api/doc',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
    ];
        }
    }

    public function generate($name, $parameters = [], $referenceType = self::ABSOLUTE_PATH)
    {
        if (!isset(self::$declaredRoutes[$name])) {
            throw new RouteNotFoundException(sprintf('Unable to generate a URL for the named route "%s" as such route does not exist.', $name));
        }

        list($variables, $defaults, $requirements, $tokens, $hostTokens, $requiredSchemes) = self::$declaredRoutes[$name];

        return $this->doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $referenceType, $hostTokens, $requiredSchemes);
    }
}
